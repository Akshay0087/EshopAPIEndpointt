// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EshopAPIEndpoint.specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UpdateRequestFeature : object, Xunit.IClassFixture<UpdateRequestFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UpdateRequest.feature"
#line hidden
        
        public UpdateRequestFeature(UpdateRequestFeature.FixtureData fixtureData, EshopAPIEndpoint_specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UpdateRequest", "As a user I want to able to update details of specific product", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update details of specific valid product with authorisation")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateRequest")]
        [Xunit.TraitAttribute("Description", "Update details of specific valid product with authorisation")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public void UpdateDetailsOfSpecificValidProductWithAuthorisation()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update details of specific valid product with authorisation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("User is logged with email address \"admin@microsoft.com\" and password \"Pass@word1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.And("User is authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "catalogBrandId",
                            "catalogTypeId",
                            "description",
                            "name",
                            "pictureUri",
                            "pictureBase64",
                            "pictureName",
                            "price"});
                table4.AddRow(new string[] {
                            "3",
                            "2",
                            "2",
                            "Town - Green Shirt",
                            "Town-Blue Shirt",
                            "shirt.com/",
                            "shirt_category",
                            "Multicolor shirt",
                            "900"});
#line 8
 testRunner.When("User input product detail", ((string)(null)), table4, "When ");
#line hidden
#line 11
 testRunner.Then("Server Response status for updating the item should be OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And("Server Response content for updating the item should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("Response time for updating the item is between acceptable range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update details of an invalid product with authorisation")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateRequest")]
        [Xunit.TraitAttribute("Description", "Update details of an invalid product with authorisation")]
        public void UpdateDetailsOfAnInvalidProductWithAuthorisation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update details of an invalid product with authorisation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given("User is logged with email address \"admin@microsoft.com\" and password \"Pass@word1\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.And("User is authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "catalogBrandId",
                            "catalogTypeId",
                            "description",
                            "name",
                            "pictureUri",
                            "pictureBase64",
                            "pictureName",
                            "price"});
                table5.AddRow(new string[] {
                            "1",
                            "2",
                            "2",
                            "Town - Green Shirt",
                            "Town-Blue Shirt",
                            "shirt.com/",
                            "shirt_category",
                            "Multicolor shirt",
                            "900"});
#line 19
 testRunner.When("User input product detail", ((string)(null)), table5, "When ");
#line hidden
#line 22
 testRunner.Then("Server Response status for updating the item should be Internal Server Error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update details of specific valid product without authorisation")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateRequest")]
        [Xunit.TraitAttribute("Description", "Update details of specific valid product without authorisation")]
        public void UpdateDetailsOfSpecificValidProductWithoutAuthorisation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update details of specific valid product without authorisation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "catalogBrandId",
                            "catalogTypeId",
                            "description",
                            "name",
                            "pictureUri",
                            "pictureBase64",
                            "pictureName",
                            "price"});
                table6.AddRow(new string[] {
                            "3",
                            "2",
                            "2",
                            "Town - Green Shirt",
                            "Town-Blue Shirt",
                            "shirt.com/",
                            "shirt_category",
                            "Multicolor shirt",
                            "900"});
#line 25
 testRunner.When("User input product detail", ((string)(null)), table6, "When ");
#line hidden
#line 28
 testRunner.Then("Server Response status for updating the item should be Unauthorised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UpdateRequestFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UpdateRequestFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
